{#
/**
 * - initial_data: {
 *    jira_email,
 *    jira_token,
 *    source_jira_namespace,
 *    target_jira_namespace
 * }
 */
#}

{% verbatim %}
<div id="jira">

  <p>Select project from the source JIRA:</p>
  <div v-if="are_projects_loading">
    <div style="width:50px;height:50px;z-index: 9999;display: flex;justify-content: center;align-items: center;border: 2px solid #fff;color: #fff;background: url(https://media1.tenor.com/images/acb1f0fd64578c46239226a06fd0b13e/tenor.gif?itemid=15347559) no-repeat center center;background-size: cover;border-radius: 50%;"></div>
  </div>
  <div v-else>
    <select v-model="source_project" @change="checked_all = false">
      <option v-once :value="null">- Select -</option>
      <option v-for="project in projects.source" :value="project.key">{{ project.name }}</option>
    </select>
  </div>

  <br v-if="source_project">
  <br v-if="source_project">
  <p v-if="source_project">Select the starting date (included) for the worklogs:</p>
  <input v-if="source_project" type="date" v-model="from" @change="dateFromWasChanged($event.target.value)">
  <br v-if="source_project">
  <br v-if="source_project">
  <p v-if="source_project">Select the end date (included) for the worklogs:</p>
  <input v-if="source_project" type="date" v-model="to" @change="dateToWasChanged($event.target.value)">
  <br v-if="source_project">
  <br v-if="source_project">

  <p v-if="source_project">Select user from the source JIRA:</p>
  <div v-if="source_project" v-for="project in projects.source">
    <div v-if="are_users_loading">
      <div style="width:50px;height:50px;z-index: 9999;display: flex;justify-content: center;align-items: center;border: 2px solid #fff;color: #fff;background: url(https://media1.tenor.com/images/acb1f0fd64578c46239226a06fd0b13e/tenor.gif?itemid=15347559) no-repeat center center;background-size: cover;border-radius: 50%;"></div>
    </div>
    <div v-else>
      <select v-if="project.key === source_project" v-model="source_user" @change="checked_all = false">
        <option v-once :value="null">- Select -</option>
        <option v-for="user in project.users" :value="user.accountId">{{ user.displayName }}</option>
      </select>
    </div>
  </div>

  <table v-if="source_user && source_project">
    <thead>
      <tr v-for="heading in table_data.headings">
        <th>
          <div style="display: inline-block">
            <label for="select-all">select all</label>
            <input id="select-all" type="checkbox" @change="handleCheckAllCheckbox()" :checked="checked_all">
          </div>
          <div style="display: inline-block;border-left:1px solid #fff;padding-left:10px;margin-left:10px">
            <label for="select-not-duplicated">select all not duplicated</label>
            <input id="select-not-duplicated" type="checkbox" @change="handleCheckAllNotDuplicatedCheckbox()"
            :checked="checked_all_not_duplicated">
          </div>
        </th>
        <th>{{ heading[1] }}</th>
        <th>{{ heading[2] }}</th>
        <th>{{ heading[3] }}</th>
        <th>{{ heading[4] }}</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="(row, row_index) in worklogs" :style="row.is_duplicate ? {backgroundColor:'orange'} : ''">
        <td>
          <input type="checkbox" :checked="row.checked" @input="rowWasClicked(row_index)">
        </td>
        <td>
          {{ row.worklogId }}
        </td>
        <td>
          {{ row.taskId }}
        </td>
        <td>
          {{ row.taskDescription }}
        </td>
        <td>
          {{ row.loggedTime }}
        </td>
      </tr>
    </tbody>
  </table>
  <br v-if="any_checked">
  <br v-if="any_checked">
  <p v-if="any_checked">Select project from the target JIRA:</p>
  <select v-if="any_checked" v-model="target_project">
    <option v-for="target_project in projects.target" :value="target_project.key">{{ target_project.name }}</option>
  </select>
  <br v-if="target_project">
  <br v-if="target_project">
  <p v-if="target_project">Select issue from the target JIRA:</p>
  <div v-if="target_project" v-for="project in projects.target">
    <select v-if="project.key === target_project" v-model="target_issue">
      <option v-for="issue in project.issues" :value="issue.id">{{ issue.key }}</option>
    </select>
  </div>
  <br v-if="target_issue">
  <br v-if="target_issue">
  <p v-if="target_issue">Select user from the target JIRA:</p>
  <div v-if="target_issue" v-for="project in projects.target">
    <select v-if="project.key === target_project" v-model="target_user">
      <option v-for="user in project.users" :value="user.accountId">{{ user.displayName }}</option>
    </select>
  </div>
  <br v-if="target_user">
  <br v-if="target_user">
  <p v-if="target_user">Email of the user you wish to log time:</p>
  <input v-if="target_user" type="email" v-model="target_email">
  <br v-if="target_email">
  <br v-if="target_email">
  <p v-if="target_email">Token of the user you wish to log time:</p>
  <input v-if="target_email" type="text" v-model="target_token">
  <br v-if="target_email && target_token">
  <br v-if="target_email && target_token">
  <button v-if="target_email && target_token" @click="submit">Submit</button>
  <div v-if="wait" style="position: fixed;top: 50%;left: 50%;transform: translate(-50%, -50%);width: 20vw;height:20vh;z-index: 9999;display: flex;justify-content: center;align-items: center;border: 2px solid #fff;color: #fff;background: url(https://media1.tenor.com/images/acb1f0fd64578c46239226a06fd0b13e/tenor.gif?itemid=15347559) no-repeat center center"></div>
</div>
{% endverbatim %}

<script>
  document.addEventListener("DOMContentLoaded", function(event) {
    new Vue({
      el: '#jira',
      data: {
        projects: [],
        host: {{ initial_data | raw }}.host,
        email: {{ initial_data | raw }}.jira_email,
        token: {{ initial_data | raw }}.jira_token,
        source_namespace: {{ initial_data | raw }}.source_jira_namespace,
        target_namespace: {{ initial_data | raw }}.target_jira_namespace,
        source_project: null,
        from: null,
        to: null,
        source_user: null,
        target_project: null,
        target_issue: null,
        target_user: null,
        target_email: '',
        target_token: '',
        checked_all: false,
        checked_all_not_duplicated: true,
        any_checked: false,
        wait: false,
        are_projects_loading: true,
        are_users_loading: true,
        are_issues_loading: true,
        are_worklogs_loading: true
      },
      created() {
        let time = new Date()
        this.to = time.toISOString().slice(0, 10)
        time.setMonth(time.getMonth() - 1);
        this.from = time.toISOString().slice(0, 10)

        axios.get(`./jira/projects?prefix=source`)
        .then(response => {
          this.projects.source = response.data
          this.are_projects_loading = false
          this.projects.source.map(project => {
            axios.get(`./jira/users?prefix=${this.source_namespace}`)
            .then(response => {
              project.users = response.data
              this.are_users_loading = false
              project.users.map(user => {
                axios.get(`./jira/issues?prefix=${this.source_namespace}&project_key=${project.key}`)
                .then(response => {
                  user.issues = response.data
                  this.are_issues_loading = false
                  user.issues.map(issue => {
                    const users_accounts_ids = project.users.map(user => user = user.accountId)
                    axios.get(`./jira/issues-worklogs?prefix=${this.source_namespace}&issue_key=${issue.key}&users_accounts_ids=${users_accounts_ids}&start_date=${this.from}&end_date=${this.to}`)
                    .then(response => {
                      issue.worklogs = response.data
                      this.are_worklogs_loading = false
                    })
                  })
                })
              })
            })
          })
        })
      },
      computed: {
        worklogs() {
          worklogs = []
          if (this.source_project && this.source_user) {
            this.projects.source.map(project => {
              if (project.key === this.source_project) {
                project.issues.map(issue => {
                  project.users.map(user => {
                    if (user.accountId === this.source_user) {
                      project.worklogs.map(worklogs_array => {
                        worklogs_array.map(worklog => {
                          if (worklog.accountId === this.source_user && worklog.issueId === issue.id) {
                            let text
                            try {
                              text = worklog.comment.content[0].content[0].text
                            } catch (e) {
                              text = ''
                            }
                            worklogs.push({
                              worklogId: worklog.id,
                              taskId: issue.id,
                              taskDescription: text,
                              loggedTime: worklog.timeSpent,
                              checked: (this.isDuplicate(worklog) ? false : true),
                              is_duplicate: this.isDuplicate(worklog)
                            })
                          }
                        })
                      })
                    }
                  })
                })
              }
            })
          }
          return worklogs
        },
        table_data() {
          return {
            headings: [[null, 'Worklog ID', 'Task ID', 'Task Description', 'Logged Time']]
          }
        }
      },
      methods: {
        isDuplicate(source_worklog) {
          return this.projects.target.some(project => {
            if (project.key) {
              return project.worklogs.some(worklog_array => {
                return worklog_array.some(target_worklog => {
                  return target_worklog.started === source_worklog.created
                })
              })
            } else {
              return false
            }
          })
        },
        handleCheckAllCheckbox() {
          this.checked_all_not_duplicated = false
          this.checked_all = !this.checked_all
          if (this.checked_all) {
            this.any_checked_not_duplicated = false
            this.worklogs.map(row => row.checked = true)
            this.any_checked = true
          } else {
            this.worklogs.map(row => row.checked = false)
            this.any_checked = false
          }
        },
        handleCheckAllNotDuplicatedCheckbox() {
          this.checked_all = false
          this.checked_all_not_duplicated = !this.checked_all_not_duplicated
          if (this.checked_all_not_duplicated) {
            this.worklogs.map(row => {
              if (row.is_duplicate) {
                row.checked = false
              } else {
                row.checked = true
                this.any_checked = true
              }
            })
          } else {
            this.worklogs.map(row => row.checked = false)
            this.any_checked = false
          }
        },
        rowWasClicked(row_index) {
          this.checked_all = !this.checked_all
          this.checked_all = !this.checked_all
          this.worklogs.map((row, index) =>{
            if (index === row_index) {
              row.checked = !row.checked
            }
          })
          const turn_off_checked_all = this.worklogs.some(row => row.checked === false)
          if (turn_off_checked_all) {
            this.checked_all = false
          }
          const turn_on_checked_all = this.worklogs.every(row => row.checked === true)
          if (turn_on_checked_all) {
            this.checked_all = true
          }
          this.any_checked = this.worklogs.some(row => row.checked === true)
          const turn_on_checked_all_not_duplicated = this.worklogs.filter(row => row.is_duplicate === false).every(duplicated_row => duplicated_row.checked === true)
          const have_at_least_one_checked_duplicate = this.worklogs.filter(row => row.is_duplicate === true).some(not_duplicated_row => not_duplicated_row.checked === true)
          this.checked_all_not_duplicated = turn_on_checked_all_not_duplicated && !have_at_least_one_checked_duplicate;
        },
        submit() {
          const agree = confirm("Log selected times in target JIRA?");
          if (agree) {
            const worklogs = []
            this.projects.source.map(project => {
              if (project.key === this.source_project) {
                project.worklogs.map(worklogs_array => {
                  worklogs_array.map(worklog => {
                    this.worklogs.map(computed_worklog => {
                      if (computed_worklog.worklogId === worklog.id && computed_worklog.checked === true) {
                        worklogs.push(worklog)
                      }
                    })
                  })
                })
              }
            })
            if (this.target_namespace, this.target_project, this.target_issue, this.target_user, this.target_email, this.target_token, this.any_checked) {
              const data = {
                namespace: this.target_namespace,
                project: this.target_project,
                issue: this.target_issue,
                user: this.target_user,
                email: this.target_email,
                token: this.target_token,
                worklogs: worklogs
              }
              this.wait = true
              axios
                .post(`./jira/submit`, data)
                .then(response => {
                  alert(response.data)
                  axios.get(`./jira/projects-from-to?&from=${this.from}&to=${this.to}`)
                  .then(response => {
                    this.projects = response.data
                    this.init(this.from, this.to)
                  })
                })
            } else {
              alert('Incorrect or incomplete data!')
            }
          }
        },
        init(new_from = null, new_to = null) {
          this.projects.source.map(source => {
            source.users.unshift({
              accountId: null,
              displayName: '- Select -'
            })
            source.worklogs.map(worklogs_array => {
              worklogs_array.map(worklog => worklog.checked = false)
            })
          })
          this.projects.source.unshift({
            key: null,
            name: '- Select -',
            users: [
              {
                accountId: null,
                displayName: '- Select -'
              }
            ]
          })
          this.projects.target.map(target => {
            target.users.unshift({
              accountId: null,
              displayName: '- Select -'
            })
            target.issues.unshift({
              id: null,
              key: '- Select -'
            })
            target.worklogs.map(worklogs_array => {
              worklogs_array.map(worklog => worklog.checked = false)
            })
          })
          this.projects.target.unshift({
            key: null,
            name: '- Select -',
            users: [
              {
                accountId: null,
                displayName: '- Select -'
              }
            ],
            issues: [
              {
                id: null,
                key: '- Select -'
              }
            ]
          })
          if (new_to) {
            this.to = new_to
          } else {
            let time = new Date()
            this.to = time.toISOString().slice(0, 10)
          }
          if (new_from) {
            this.from = new_from
          } else {
            let time = new Date()
            time.setMonth(time.getMonth() - 1);
            this.from = time.toISOString().slice(0, 10)
          }
          this.are_projects_loading = false
          this.are_users_loading = false
        },
        dateFromWasChanged(value) {
          this.wait = true
          this.from = value
          axios.get(`./jira/projects-from-to?&from=${this.from}&to=${this.to}`)
          .then(response => {
            this.projects = response.data
            this.init(this.from, this.to)
          })
        },
        dateToWasChanged(value) {
          this.wait = true
          this.to = value
          axios.get(`./jira/projects-from-to?&from=${this.from}&to=${this.to}`)
          .then(response => {
            this.projects = response.data
            this.init(this.from, this.to)
          })
        }
      }
    })
  })
</script>
